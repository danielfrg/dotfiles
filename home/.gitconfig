[user]
    name = Daniel Rodriguez
    email = daniel@danielfrg.com

[include]
    path = .gitconfig.local

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false
    editor = vim

    autocrlf = input
    precomposeunicode = true

    pager = delta
    editor = nvim

[column]
    ui = auto

[init]
    defaultBranch = main

[branch]
    sort = -committerdate

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[interactive]
    algorithm = patience
	compactionHeuristic = true
	tool = nvimdiff
    diffFilter = delta --color-only

[delta]
    navigate = true    # use n and N to move between diff sections
    # delta detects terminal colors automatically; set one of these to disable auto-detection
    # dark = true
    # light = true

[tag]
    sort = version:refname
    forceSignAnnotated = true

[fetch]
    prune = true
    pruneTags = true
    all = true

[push]
    default = simple
    autoSetupRemote = true
    followTags = true

[pull]
    rebase = false

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    conflictstyle = diff3

[rebase]
        autoSquash = true
        autoStash = true
        updateRefs = true

[diff]
    algorithm = histogram
    colorMoved = plain
    mnemonicPrefix = true
    renames = true

[status]
    submoduleSummary = true

[submodule]
    recurse = true

[alias]
    # View the current working tree status using the short format
    c = commit
    cm = commit
    s = status -sb
    st = status -sb
    co = checkout
    br = branch
    cu = commit -am 'Update'
    wip = commit -am 'WIP'
    runci = commit --allow-empty -nm 'Empty commit to run ci'

    uncommit = reset HEAD^
    unstage = reset HEAD --

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Checkout a pull request from origin (of a github repository)
    pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    rebase-branch = "!f() { git rebase -i $(git merge-base $(git main-branch) HEAD); }; f"
    nope = "!f() { git reset HEAD --hard && git clean -fd; } ; f"

    wt = "worktree"
    wtclone = "!f() { git-wt-clone \"$@\"; }; f"
    wtadd = "!f() { git-wt-new \"$@\"; }; f"
    wtls = "worktree list"
    wtrm = "worktree remove"


[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[color]
    ui = auto

[color "branch"]
    current = red
    local = yellow
    remote = green

[color "diff"]
    meta = cyan
    frag = magenta
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[help]
    autocorrect = 1

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

[credential "https://github.com"]
    helper = !/opt/homebrew/bin/gh auth git-credential
    helper = !/usr/bin/gh auth git-credential

[credential "https://gist.github.com"]
    helper = !/opt/homebrew/bin/gh auth git-credential
    helper = !/usr/bin/gh auth git-credential

[commit]
    verbose = true
    ; gpgsign = true

[rerere]
    enabled = true
    autoupdate = true

# [gpg]
#     program = gpg
